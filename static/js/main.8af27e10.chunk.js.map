{"version":3,"sources":["components/new.jsx","components/form.jsx","components/toDoList.jsx","App.js","serviceWorker.js","index.js"],"names":["ToDoItem","props","updateItem","e","preventDefault","handleEdit","listItem","input","value","changeEdit","state","edited","onSubmit","type","ref","defaultValue","this","title","Button","color","key","id","className","done","style","position","right","top","onClick","handleDelete","completed","handleDone","outline","setState","renderForm","renderItem","Component","AddItemForm","data","handleChange","currentTarget","name","Date","now","newItem","addItem","handleSubmit","placeholder","onChange","left","display","disabled","ToDoList","toDoList","sort","mainToDoList","a","provisoire","exmain","filter","item","axios","delete","status","console","log","index","findIndex","newValue","ShowChecked","get","newlist","b","data-toggle","checked","sortByChecked","map","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8af27e10.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Button } from 'reactstrap';\r\nimport { Component } from \"react\";\r\n\r\nclass ToDoItem extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      edited : false\r\n    }\r\n  }\r\n      \r\n\r\n  renderForm(){\r\n    return(\r\n      <form onSubmit={(e) => this.updateItem(e)} >\r\n      <input type=\"text\" ref={(value) => this.input = value} defaultValue={this.props.listItem.title}/>\r\n      <Button type=\"submit\" color=\"success\">UPDATE</Button>\r\n      </form>\r\n    );\r\n  }\r\n\r\n  updateItem = (e) => {\r\n      e.preventDefault();\r\n      this.props.handleEdit(this.props.listItem,this.input.value);\r\n      this.changeEdit();                                                                                                                       \r\n  }\r\n\r\n  renderItem() {\r\n    return(\r\n      <li\r\n      key={this.props.listItem.id}\r\n      className={\r\n        this.props.listItem.done ? \"list-group-item list-group-item-danger\" : \"list-group-item\"\r\n      }\r\n  >\r\n  \r\n       <span>{this.props.listItem.title}</span>\r\n    <div\r\n    style = {{\r\n      position:\"absolute\",\r\n      right:30,\r\n        top:5}}>\r\n          <button\r\n          \r\n          type=\"button\"\r\n          className=\"btn btn-danger\"\r\n          onClick={() => this.props.handleDelete(this.props.listItem)}\r\n          >\r\n        DELETE\r\n      </button>\r\n\r\n      <button\r\n          type=\"button\"\r\n          className={this.props.listItem.completed ? \"btn btn-info\" : \"btn btn-secondary\"} //{`btn btn-${listitem.done?\"info\":\"primary\"}\r\n          onClick={() => this.props.handleDone(this.props.listItem)}\r\n        >\r\n          {this.props.listItem.completed ? \"CHECK\" : \"UNCHECK\"}\r\n        </button>\r\n\r\n        <Button outline color=\"success\" onClick = {() => this.changeEdit()}>\r\n            EDIT\r\n        </Button>\r\n\r\n    </div>\r\n  </li>\r\n    );\r\n  }\r\n\r\n  changeEdit(){\r\n    this.setState({\r\n      edited : !this.state.edited\r\n    })\r\n  }\r\n  render(){\r\n    const edited = this.state.edited;\r\n    return (\r\n      <section>\r\n    {\r\n      edited ? this.renderForm() : this.renderItem()\r\n    }\r\n     </section>\r\n  );\r\n      }\r\n}\r\nexport default ToDoItem;\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class AddItemForm extends Component {\r\n  state = {\r\n    data: {\r\n      id: null,\r\n      title: \"\",\r\n      done: false\r\n    }\r\n  };\r\n  handleChange = e => {\r\n    const data = { ...this.state.data };\r\n    data[e.currentTarget.name] = e.currentTarget.value;\r\n    data.id = Date.now();\r\n    this.setState({ data });\r\n  };\r\n\r\n  handleSubmit(e) {\r\n    e.preventDefault();\r\n    const newItem = { ...this.state.data };\r\n    if (newItem.title !== \"\") {\r\n      this.props.addItem(newItem);\r\n    }\r\n    this.setState({ data: { title: \"\", id: null } });\r\n  }\r\n  render() {\r\n    return (\r\n      <form onSubmit={e => this.handleSubmit(e)} className=\"add-item-form\">\r\n        <input\r\n          value={this.state.data.title}\r\n          name=\"title\"\r\n          className=\"form-control\"\r\n          type=\"text\"\r\n          placeholder=\"ADD ITEM\"\r\n          onChange={e => this.handleChange(e)}\r\n        />\r\n        <button\r\n          style={{\r\n            position:\"center\",\r\n            left:400,\r\n            display:\"block\"}}\r\n          disabled={this.state.data.title === \"\"}\r\n          className=\"btn btn-warning m1-3\"\r\n          id=\"addb\"\r\n          \r\n        >\r\n          ADD\r\n        </button>\r\n      </form>\r\n\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport ToDoItem from \"./new\";\r\nimport AddItemForm from \"./form\";\r\nimport axios from 'axios';\r\nimport \"../App.css\"\r\nexport default class ToDoList extends Component {\r\n  state = {\r\n    toDoList: [\r\n      { id: 201, title: \"grocery\", completed: false },\r\n      { id: 202, title: \"Study\", completed: true },\r\n      { id: 203, title: \"wash the car\", completed: false }\r\n    ],\r\n    sort : true ,\r\n    mainToDoList : [],\r\n  };\r\n  \r\n  async componentDidMount() {\r\n    const {data,status} = await axios.get('https://jsonplaceholder.typicode.com/todos')\r\n    console.log(data,status);\r\n    const toDoList = [...data]\r\n    this.setState({toDoList,mainToDoList:data})\r\n  }\r\n  \r\n  addItem = data => {\r\n    const toDoList = [data, ...this.state.toDoList];\r\n    this.setState({ toDoList });\r\n  };\r\n\r\n  handleDelete = async listItem => {\r\n    const provisoire = this.state.toDoList\r\n    const exmain = this.state.mainToDoList\r\n    const toDoList = this.state.toDoList.filter(\r\n      item => item.id !== listItem.id\r\n    );\r\n    const mainToDoList = this.state.mainToDoList.filter(\r\n      item => item.id !== listItem.id\r\n    );\r\n    this.setState({ toDoList , mainToDoList});\r\n    try\r\n    {const {status} = await axios.delete(\"https://jsonplaceholder.typicode.com/todos/\" + listItem.id)\r\n     console.log(listItem);\r\n     console.log(status);}\r\n    catch(err)\r\n     { \r\n       console.log(err);\r\n       this.setState({toDoList : provisoire,mainToDoList : exmain})}\r\n  };\r\n\r\n  handleDone = listItem => {\r\n    const toDoList = this.state.toDoList;\r\n    const index = this.state.toDoList.findIndex(\r\n      item => item.id === listItem.id\r\n    );\r\n    toDoList[index].completed = !toDoList[index].completed;\r\n    this.setState(toDoList);\r\n    console.log(toDoList[index]);\r\n  };\r\n\r\n  handleEdit = (listItem,newValue) => {\r\n    const toDoList = this.state.toDoList;\r\n    const index = this.state.toDoList.findIndex(\r\n      item => item.id === listItem.id\r\n    );\r\n      toDoList[index].title = newValue ;\r\n      this.setState(toDoList);\r\n  }\r\n  \r\n  sortByChecked(key){\r\n    const {toDoList,sort} = this.state\r\n    let newlist = toDoList\r\n    console.log(key)\r\n    if (sort) {\r\n      newlist = toDoList.sort((a,b) => a.completed - b.completed)\r\n    } else {\r\n      newlist = toDoList.sort((a,b) => b.completed - a.completed)\r\n    }\r\n    this.setState({\r\n      sort : !sort ,\r\n      toDoList : newlist\r\n    })\r\n  }\r\n\r\n  ShowChecked = (e) => {\r\n    const id = e.currentTarget.id\r\n    let toDoList = []\r\n    if(id===\"checked\")\r\n      toDoList = this.state.mainToDoList.filter(item => item.completed)\r\n    else if(id===\"unchecked\")\r\n      toDoList = this.state.mainToDoList.filter(item => !item.completed)\r\n    else\r\n      toDoList=this.state.mainToDoList\r\n      this.setState({toDoList})\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"mt-4\">\r\n        <AddItemForm addItem={this.addItem} />\r\n        \r\n        <div \r\n        style = {{left:400}}\r\n        className=\"btn-group btn-group-toggle\" data-toggle=\"buttons\">\r\n      <label className=\"btn btn-secondary active\">\r\n        <input type=\"radio\" name=\"options\" id=\"all\" checked onClick={this.ShowChecked}/> ALL\r\n      </label>\r\n      <label \r\n      className=\"btn btn-secondary\">\r\n        <input type=\"radio\" name=\"options\" id=\"checked\" onClick={this.ShowChecked}/> CHECKED\r\n      </label>\r\n      <label className=\"btn btn-secondary\">\r\n        <input type=\"radio\" name=\"options\" id=\"unchecked\" onClick={this.ShowChecked}/> UNCHECKED\r\n      </label>\r\n      <label\r\n        className=\"btn btn-secondary\"\r\n        onClick = {() => this.sortByChecked()}\r\n        >SORT</label>\r\n    </div>\r\n        \r\n        <div>\r\n          <ul className=\"list-group mtt-4\">\r\n            {this.state.toDoList.map(listItem => (\r\n              <ToDoItem\r\n                key = {listItem.id}\r\n                listItem={listItem}\r\n                handleDone={this.handleDone}\r\n                handleDelete={this.handleDelete}\r\n                handleEdit={this.handleEdit}\r\n              />\r\n            ))}\r\n          </ul>\r\n        </div>\r\n       \r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport ToDoList from \"./components/toDoList\";\n\nfunction App() {\n\n  return (\n    <div className=\"Container\">\n      <h1\n      style = {{\n        position:\"relative\",\n        left:100,\n        top:5}}>TO DO LIST</h1>\n      <ToDoList/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n\n\n/*\nconst jobs = [ {id :1 , isActive : true}\n,              {id:2 , isActive: false}\n,              {id:3 , isActive:true }\n];\n\nconst activeJobs=jobs.filter(job=>job.isActive);\nconsole.log(activeJobs);\nconst colors = [\"red\" , \"blue\" , \"green\"]\nconst newcolors = colors.map(color=>\"<li>\"+color+\"</li>\");\nconsole.log(newcolors);\nconst obj1 = {a:1,b:2,c:3}\nconst obj2 = {d:4,e:5,f:6}\nconst obj3 = {...obj1,...obj2}\nconsole.log(obj3);*/\n"],"sourceRoot":""}